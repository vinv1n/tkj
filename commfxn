Void commFxn(UArg arg0, UArg arg1){
    char payload[80];
    char data[80];
    uint16_t senderAddr = IEEE80154_SINK_ADDR;
    char nimi[16];
    int i, n, valinta;
    
    while(i<=4){
       if(i==0){
           Display_print0(hDisplay, 8,8, "Uusi");
           if(hButton0 == true){
               i++;
           }
           else {
               valinta = 0;
            }
        }
        else if (i==1){
           Display_print0(hDisplay, 8,8, "leiki");
           if(hButton0 == true){
               i++;
           }
           else {
               valinta = 1;
            }
        }
        else if (i==2){
           Display_print0(hDisplay, 8,8, "leiki");
           if(hButton0 == true){
               i++;
           }
           else {
               valinta = 2;
           }
        }
        else if (i==3){
           Display_print0(hDisplay, 8,8, "leiki");
           if(hButton0 == true){
               i++;
            }
           else {
               valinta = 3;
            }
        }
    }
    int32_t result = StartReceive6LoWPAN();
    if (result != true) {
        System_abort("Wireless receive start failed");
    }
    switch (valinta) {
        case '0':
            if (nimi == true){
                System_printf("Laittessa on jo Aasigotchi!\n");
                System_flush();
            }
            else if (nimi == NULL){
                System_printf("Luodaan uusi aasigotchi vai ladataanko serveriltä\n");
                System_flush();
                /*valinta jommallakummalla näppäimellä*/
                if (hButton0 == true){
                    /*haetaan vanha gothi*/
                    if (GetTXFlag() == false){
                        Send6LoWPAN(&senderAddr, "nimi:\n", 25);
                        StartReceive6LoWPAN();
                    }
                    else if (GetRXFlag() == true){
                        if (Receive6LoWPAN(&senderAddr, payload, 80) != -1) {
                        //data=payload;
                        }
                        else{
                            System_abort("Tiedoston latauksessa tapahtui virhe");
                        }
                    }
                }
                else {
                    /*luodaan uusi gotchi pitää parantaa jossain vaihessa*/
                    char gothi[80];
                    //gothi = [natsigotchi,kuva];
                    if (GetTXFlag() == false) {
                        Send6LoWPAN(&senderAddr, gothi, 80);
                        StartReceive6LoWPAN();
                    }
                    else if (GetRXFlag() == true){
                        if (Receive6LoWPAN(&senderAddr, payload, 80) != -1) {
                            System_printf("Aasigotchin lataus serverille onnistui");
                            System_flush();
                        }
                    }
                }
            }
            /*luodaan uusi gothi ja lähetetään serverille*/
        case '1':
            /*haetaan laheltä leikki kaveria*/
            if (nimi == NULL){
                if (GetTXFlag() == false){
                    Send6LoWPAN(&senderAddr, nimi, 16);
                    StartReceive6LoWPAN();
                }
                else if (GetRXFlag() == true){
                    if (Receive6LoWPAN(&senderAddr, payload, 80) != -1){
                        //data = payload; 
                    }
                    else{
                        System_abort("Tiedonsiirrossa tapahtui virhe");
                    }
                }
            }
            else{
                System_printf("Laitteessa on jo Gotchi ladattuna");
                System_flush();
            }
        case '2':
            /*hakee kaveria läheltä*/
            while(1){
                if (GetTXFlag() == false){
                    Send6LoWPAN(0xFFFF, nimi,16);
                    StartReceive6LoWPAN();
                    if (GetRXFlag() == true){
                        if(Receive6LoWPAN(&senderAddr, payload, 80 != -1)){
                            //data = payload;
                            if (hButton0 == true){
                                System_printf("Määritä leikkiaika virtapainikkeen klikkaus=5s leikkiä!");
                                System_flush();
                                n=1*10000/Clock_tickPeriod;
                                while (hButton0 == true){
                                    n++;
                                    if (n>(60*10000/Clock_tickPeriod)){
                                        break;
                                    }
                                        System_printf("Liian pitkä väli painallusten välillä!");
                                        System_flush();
                                        break;
                                }
                            }
                        }
                            break;
                    }
                        else {
                            System_printf("Tiedonsiirrossa tapahtui virhe");
                            System_flush();
                            break;
                        }
                    }
                }
        case '3':
            /*lähetetään gothi takaisin tarhaan*/
            if (nimi == NULL){
                System_abort("Laitteessa ei ole Gotchia!");
            }
            else {
                if (GetTXFlag() == false){
                    Send6LoWPAN(&senderAddr, data, 80);
                    StartReceive6LoWPAN();
                }
                else if (GetRXFlag() == true){
                    if (Receive6LoWPAN(&senderAddr, payload, 80) != -1){
                        System_printf("Gotchi pääsi turvallisti aitaukseen nukkumaan");
                        System_flush();
                    }
                    else{
                        System_abort("Tiedonsiirrossa tapahtui virhe!");
                    }
                }
            }
        default:
            System_abort("Virhe valintaa suorittaessa!");
    }
}
// MAIN TASK
Void taskFxn(UArg arg0, UArg arg1) {
    //char taulukko[32] = ["Uusi", "Leiki", "Terve", "Nuku", "Sammuta laite"];
    //char lista[20] = ["Ulkoile", "Ota aurinkoa"];
    int i = 0;
    int n;

// *******************************
    //
    // USE TWO DIFFERENT I2C INTERFACES
    //
    // *******************************
    I2C_Handle      i2c; // INTERFACE FOR OTHER SENSORS
    I2C_Params      i2cParams;
    I2C_Handle i2cMPU; // INTERFACE FOR MPU9250 SENSOR
	I2C_Params i2cMPUParams;
	
	float ax, ay, az, gx, gy, gz;
	double temperature,pres,temp,bright,hum;
	char str[80];
    
    /* Create I2C for usage */
    I2C_Params_init(&i2cParams);
    i2cParams.bitRate = I2C_400kHz;
    
    I2C_Params_init(&i2cMPUParams);
    i2cMPUParams.bitRate = I2C_400kHz;
    i2cMPUParams.custom = (uintptr_t)&i2cMPUCfg;
    
        // *******************************
    //
    // MPU OPEN I2C
    //
    // *******************************
    i2cMPU = I2C_open(Board_I2C, &i2cMPUParams);
    if (i2cMPU == NULL) {
        System_abort("Error Initializing I2CMPU\n");
    }

    // *******************************
    //
    // MPU POWER ON
    //
    // *******************************
    PIN_setOutputValue(hMpuPin,Board_MPU_POWER, Board_MPU_POWER_ON);

    // WAIT 100MS FOR THE SENSOR TO POWER UP
	Task_sleep(100000 / Clock_tickPeriod);
    System_printf("MPU9250: Power ON\n");
    System_flush();

    // *******************************
    //
    // MPU9250 SETUP AND CALIBRATION
    //
    // *******************************
	System_printf("MPU9250: Setup and calibration...\n");
	System_flush();

	mpu9250_setup(&i2cMPU);

	System_printf("MPU9250: Setup and calibration OK\n");
	System_flush();

    // *******************************
    //
    // MPU CLOSE I2C
    //
    // *******************************
    I2C_close(i2cMPU);

    // *******************************
    //
    // OTHER SENSOR OPEN I2C
    //
    // *******************************
    
    i2c = I2C_open(Board_I2C0, &i2cParams);
    if (i2c == NULL) {
        System_abort("Error Initializing I2C\n");
    }
    else {
        System_printf("I2C Initialized!\n");
    }

    // *******************************
    //
    // SETUP OTHER SENSORS
    //
    // *******************************
    
    // TMP007 SETUP
    tmp007_setup(&i2c);
    
    // OPT3001 SETUP
    opt3001_setup(&i2c);
    
    // BMP280 SETUP
    bmp280_setup(&i2c);
    
    // HDC1000 SETUP
    hdc1000_setup(&i2c);
    
    // *******************************
    //
    // OTHER SENSOR CLOSE I2C
    //
    // *******************************
    I2C_close(i2c);

    /* Display */
    Display_Params displayParams;
	displayParams.lineClearMode = DISPLAY_CLEAR_BOTH;
    Display_Params_init(&displayParams);

    hDisplay = Display_open(Display_Type_LCD, &displayParams);
    if (hDisplay == NULL) {
        System_abort("Error initializing Display\n");
    }

    Display_clear(hDisplay);
    char tstr[50];
    //sprintf(dstr,"%x",IEEE80154_MY_ADDR);
    Display_print0(hDisplay, 9, 1, tstr);
    Task_sleep(5 * 1000000/Clock_tickPeriod);

    Display_clear(hDisplay);
    
   Display_print0(hDisplay, 8,8, "Päällä");
    while(1){
        Display_print0(hDisplay, 7,8, taulukko[i-1]);
		Display_print0(hDisplay, 8,8, taulukko[i]);
        Display_print0(hDisplay, 9,8, taulukko[i+1]);
		if (hButton0 == true){
            i++;
        }
        else if (cButton0 == true){
            Display_print0(hDisplay, 8,8, taulukko[i]);
            if (i == 1){
                Display_print0(hDisplay, 8,8, "Mita halutaan tehda?");
                for (n=0; n <= 1; n++){
                    Display_print0(hDisplay, 8,8,lista[n]);
                    if (cButton0 == true){
                        Display_print0(hDisplay, 1,1, lista[n]);
                    }
                }
            }
        }
    }
}
